name: Deploy

on:
  push:
    branches: [main, develop]
  workflow_run:
    workflows: ['CI']
    types: [completed]
    branches: [main, develop]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "frontend_url=https://spend-smart-frontend-prod.onrender.com" >> $GITHUB_OUTPUT
            echo "backend_url=https://spend-smart-backend-prod.onrender.com" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "frontend_url=https://spend-smart-frontend-staging.onrender.com" >> $GITHUB_OUTPUT
            echo "backend_url=https://spend-smart-backend-staging.onrender.com" >> $GITHUB_OUTPUT
          fi

      - name: Trigger Render Deployment
        run: |
          echo "üöÄ Deployment triggered for ${{ steps.env.outputs.environment }} environment"
          echo "Frontend URL: ${{ steps.env.outputs.frontend_url }}"
          echo "Backend URL: ${{ steps.env.outputs.backend_url }}"

          # Render will automatically deploy based on the render.yaml configuration
          # No manual trigger needed as autoDeploy is set to true

      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for Render deployment to complete..."
          sleep 30

      - name: Health Check
        run: |
          echo "üîç Performing health check..."
          # This will be implemented once the backend health endpoint is ready
          # curl -f ${{ steps.env.outputs.backend_url }}/api/health || exit 1

      - name: Deployment Success
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üåê Frontend: ${{ steps.env.outputs.frontend_url }}"
          echo "üîß Backend: ${{ steps.env.outputs.backend_url }}"

      - name: Create deployment
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const environment = "${{ steps.env.outputs.environment }}";
            const frontendUrl = "${{ steps.env.outputs.frontend_url }}";

            // Create deployment status
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: context.sha,
              state: 'success',
              environment,
              environment_url: frontendUrl,
              description: `Deployed to ${environment}`
            });

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Notify on success
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ Deployment notification: Success"
          # Add Slack/Discord notification here if needed

      - name: Notify on failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment notification: Failed"
          # Add Slack/Discord notification here if needed
